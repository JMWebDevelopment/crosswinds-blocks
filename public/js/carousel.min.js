"use strict";var previousButton,nextButton,rotationButton,pauseContainer,resumeContainer,slidesContainer,slides,dots;function hideNonVisibleSlides(){document.querySelectorAll('.carousel .slides .slide[aria-hidden="true"]').forEach(function(e){e.classList.add("is-hidden"),e.querySelectorAll("a, button").forEach(function(e){e.setAttribute("tabindex",-1)})})}function toggleAutoplay(){(jQuery(".carousel .slides").slick("slickGetOption","autoplay")?disableAutoplay:enableAutoplay)()}function disableAutoplay(){jQuery(".carousel .slides").slick("slickSetOption","autoplay",!1),jQuery(".carousel .slides").slick("slickPause"),pauseContainer.classList.remove("is-visible"),resumeContainer.classList.add("is-visible")}function enableAutoplay(){jQuery(".carousel .slides").slick("slickSetOption","autoplay",!0),jQuery(".carousel .slides").slick("slickPlay"),pauseContainer.classList.add("is-visible"),resumeContainer.classList.remove("is-visible")}window.addEventListener("DOMContentLoaded",function(e){previousButton=document.querySelector(".carousel .previous-button"),nextButton=document.querySelector(".carousel .next-button"),rotationButton=document.querySelector(".carousel .rotation-button"),pauseContainer=document.querySelector(".carousel .rotation-button .pause-container"),resumeContainer=document.querySelector(".carousel .rotation-button .resume-container"),slidesContainer=document.querySelector(".carousel .slides"),slides=document.querySelectorAll(".carousel .slides .slide"),jQuery(".carousel .slides").on("init",function(e,t){hideNonVisibleSlides(),(dots=document.querySelectorAll(".carousel .slick-dots li button"))[0].setAttribute("aria-current",!0),dots.forEach(function(e,t){e.innerText="Go to slide "+(t+1),e.addEventListener("click",function(e){disableAutoplay()})})}),jQuery(".carousel .slides").on("beforeChange",function(e,t,o,i){slides.forEach(function(e){e.classList.remove("is-hidden")}),dots.forEach(function(e){e.removeAttribute("aria-current")}),dots[i].setAttribute("aria-current",!0)}),jQuery(".carousel .slides").on("afterChange",function(e,t,o){hideNonVisibleSlides(),slides[o].querySelectorAll("a, button").forEach(function(e){e.removeAttribute("tabindex")})}),jQuery(".carousel .slides").slick({dots:!0,accessibility:!1,autoplay:!0,autoplaySpeed:7e3,prevArrow:document.querySelector(".carousel .previous-button"),nextArrow:document.querySelector(".carousel .next-button")}),previousButton.addEventListener("click",function(e){disableAutoplay()}),nextButton.addEventListener("click",function(e){TransitionRunning=!0,disableAutoplay()}),rotationButton.addEventListener("click",function(e){toggleAutoplay()})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,