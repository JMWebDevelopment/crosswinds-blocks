"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}!function(t,e){console.log(t),console.log(e),"function"==typeof define&&define.amd?define([],e(t)):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=e(t):t.tabby=e(t)}("undefined"!=typeof global?global:(void 0).window||(void 0).global,function(n){function s(t,e,o){if("[object Object]"===Object.prototype.toString.call(t))for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.call(o,t[n],n,t);else for(var c=0,r=t.length;c<r;c++)e.call(o,t[c],c,t)}function l(){var t={},e=!1,o=0,n=arguments.length;for("[object Boolean]"===Object.prototype.toString.call(arguments[0])&&(e=arguments[0],o++);o<n;o++){c=void 0;var c,r=arguments[o];for(c in r)Object.prototype.hasOwnProperty.call(r,c)&&(e&&"[object Object]"===Object.prototype.toString.call(r[c])?t[c]=l(!0,t[c],r[c]):t[c]=r[c])}return t}function i(t,e){for(Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),o=e.length;0<=--o&&e.item(o)!==this;);return-1<o});t&&t!==document;t=t.parentNode)if(t.matches(e))return t;return null}function u(t){"#"===t.charAt(0)&&(t=t.substr(1));for(var e,o=String(t),n=o.length,c=-1,r="",a=o.charCodeAt(0);++c<n;){if(0===(e=o.charCodeAt(c)))throw new InvalidCharacterError("Invalid character: the input contains U+0000.");1<=e&&e<=31||127==e||0===c&&48<=e&&e<=57||1===c&&48<=e&&e<=57&&45===a?r+="\\"+e.toString(16)+" ":r+=128<=e||45===e||95===e||48<=e&&e<=57||65<=e&&e<=90||97<=e&&e<=122?o.charAt(c):"\\"+o.charAt(c)}return"#"+r}function a(t,e){t.hasAttribute("data-tab-no-focus")||(t.classList.contains(e.contentActiveClass)?(e={x:n.pageXOffset,y:n.pageYOffset},t.focus(),document.activeElement.id!==t.id&&(t.setAttribute("tabindex","-1"),t.setAttribute("data-tab-focused",!0),t.focus()),n.scrollTo(e.x,e.y)):t.hasAttribute("data-tab-focused")&&t.removeAttribute("tabindex"))}function d(c,r){var t=document.querySelector(u(c));t&&(t=i(t,r.selectorContentGroup))&&(t=t.querySelectorAll(r.selectorContent),s(t,function(t){if(t.id===c.substring(1))return t.classList.add(r.contentActiveClass),void a(t,r);var e,o,n;t.classList.remove(r.contentActiveClass),e=t,(o=r).stopVideo&&!e.classList.contains(o.contentActiveClass)&&(o=e.querySelector("iframe"),e=e.querySelector("video"),o&&(n=o.src,o.src=n),e&&e.pause()),a(t,r)}))}function e(t){var e,o=n.location.hash;r&&(r.id=r.getAttribute("data-tab-id"),r=null),o&&(e=document.querySelector(f.selectorToggle+'[href*="'+o+'"]'),b.toggleTab(o,e))}function o(t){var e;0!==t.button||t.metaKey||t.ctrlKey||(e=i(t.target,f.selectorToggle))&&e.hash&&(e.hash===n.location.hash?t.preventDefault():(r=document.querySelector(e.hash))&&(r.setAttribute("data-tab-id",r.id),r.id=""))}function c(t){(r=i(t.target,f.selectorContent))&&!r.classList.contains(f.contentActiveClass)&&(t=r.id,r.setAttribute("data-tab-id",t),r.setAttribute("data-tab-no-focus",!0),r.id="",location.hash=t)}var f,r,b={},m="querySelector"in document&&"addEventListener"in n&&"classList"in document.createElement("_")&&"onhashchange"in n,p={selectorToggle:"[data-tab]",selectorToggleGroup:"[data-tabs]",selectorContent:"[data-tabs-pane]",selectorContentGroup:"[data-tabs-content]",toggleActiveClass:"active",contentActiveClass:"active",initClass:"js-tabby",stopVideo:!0,callback:function(){}};b.toggleTab=function(t,e,o){var n,c,r,o=l(f||p,o||{}),a=document.querySelectorAll(u(t));d(t,o),e&&(t=i(n=e,(c=o).selectorToggleGroup))&&(t=t.querySelectorAll(c.selectorToggle),s(t,function(t){if(t.hash===n.hash)return t.classList.add(c.toggleActiveClass),void((r=i(t,"li"))&&r.classList.add(c.toggleActiveClass));t.classList.remove(c.toggleActiveClass),(r=i(t,"li"))&&r.classList.remove(c.toggleActiveClass)})),o.callback(a,e)};return b.destroy=function(){f&&(document.documentElement.classList.remove(f.initClass),document.removeEventListener("click",o,!1),document.removeEventListener("focus",c,!0),n.removeEventListener("hashchange",e,!1),r=f=null)},b.init=function(t){m&&(b.destroy(),f=l(p,t||{}),document.documentElement.classList.add(f.initClass),document.addEventListener("click",o,!1),document.addEventListener("focus",c,!0),n.addEventListener("hashchange",e,!1),e())},b});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,